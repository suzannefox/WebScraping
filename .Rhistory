# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, total_observations, recent_obs, total_obs)
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, recent_obs, total_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(total_obs = word(recent_observations, 4, sep = ' ')) %>%
mutate(recent_obs = word(recent_observations, 5, sep = ' ')) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, recent_obs, total_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(total_obs = word(recent_observations, 4, sep = ' ')) %>%
mutate(recent_obs = word(recent_observations, 5, sep = ' ')) %>%
mutate(recent_obs = str_remove(recent_obs, ')')) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(total_obs = word(recent_observations, 4, sep = ' ')) %>%
mutate(recent_obs = word(recent_observations, 5, sep = ' ')) %>%
mutate(recent_obs = str_remove(recent_obs, '\\)')) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(total_obs = word(recent_observations, 4, sep = ' ')) %>%
mutate(recent_obs = word(recent_observations, 5, sep = ' ')) %>%
mutate(recent_obs = str_remove(recent_obs, '\\)')) %>%
mutate(recent_obs = str_remove(recent_obs, '\\(')) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, total_obs, recent_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = str_remove(recent_observations, '\\)')) %>%
mutate(recent_observations = str_remove(recent_observations, '\\(')) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(word(recent_observations, 5, sep = ' '))) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, total_obs, recent_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = str_remove(recent_observations, '\\)')) %>%
mutate(recent_observations = str_remove(recent_observations, '\\(')) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(str_trim(word(recent_observations, 5, sep = ' ')))) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, total_obs, recent_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = str_remove(recent_observations, '\\)')) %>%
mutate(recent_observations = str_remove(recent_observations, '\\(')) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(word(recent_observations, 5, sep = ' '))) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, total_obs, recent_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = str_remove('\\)' ,recent_observations)) %>%
mutate(recent_observations = str_remove(recent_observations, '\\(')) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(word(recent_observations, 5, sep = ' '))) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, total_obs, recent_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = gsub("\\)", "", recent_observations)) %>%
mutate(recent_observations = gsub("\\(", "", recent_observations)) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(word(recent_observations, 5, sep = ' '))) %>%
# useful data
# select(original_lineno, observatory, note, planet, status ) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, total_obs, recent_obs)
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = gsub("\\)", "", recent_observations)) %>%
mutate(recent_observations = gsub("\\(", "", recent_observations)) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(word(recent_observations, 5, sep = ' '))) %>%
# useful data for choosing
select(original_lineno, observatory, note, planet, status, optimal, oc,
total_obs, recent_obs,
t_before_date, t_before_time, t_after_time, time_span,
illumination, distance) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
ggplot(aes(distance, illumination, color = status)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "Moon Illumination vs Moon Distance",
x = "Distance",
y = "Illumination",
color = "Status"
) +
theme_minimal()
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = gsub("\\)", "", recent_observations)) %>%
mutate(recent_observations = gsub("\\(", "", recent_observations)) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(word(recent_observations, 5, sep = ' '))) %>%
# useful data for choosing
select(original_lineno, reject, observatory, note, planet, status, optimal, oc,
total_obs, recent_obs,
t_before_date, t_before_time, t_after_time, time_span,
illumination, distance) %>%
identity()
df_planets %>%
filter(reject == FALSE) %>%
ggplot(aes(distance, illumination, color = status)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "Moon Illumination vs Moon Distance",
x = "Distance",
y = "Illumination",
color = "Status"
) +
theme_minimal()
df_planets %>%
filter(reject == FALSE) %>%
count(optimal, note)
df_planets %>%
filter(reject == FALSE) %>%
select(oc, recent_observations, total_obs, recent_obs)
df_planets %>%
filter(reject == FALSE) %>%
select(oc,  total_obs, recent_obs)
df_planets_potential <- df_planets %>% filter(reject == FALSE)
View(df_planets_potential)
df_planets %>%
tally()
# -------------------------------------------------------------------------
df_planets <- df_planets_orig %>%
mutate(original_lineno = row_number()) %>%
# REJECT if either ingress or egress is in red font
mutate(reject_redfont = t_before_red | t_after_red) %>%
# REJECT if date isn't between mid-March and mid-May
mutate(reject_baddate = case_when(t_before_date >= '2025-03-14' & t_before_date <= '2025-05-14' ~ FALSE, T ~ TRUE)) %>%
# calculate time span between 1 hr before to 1 hr after
mutate(time_span = difftime(t_after_time, t_before_time, units="hours")) %>%
# REJECT if time is more than 6 hours
mutate(reject_toolong = time_span > 6) %>%
# moon illumination
mutate(illumination = round(as.numeric(str_remove(moon_illumination, '%')))) %>%
mutate(distance = round(as.numeric(str_remove(moon_distance, '°')))) %>%
# REJECT if illumination is >= 50 and distance <= 90
mutate(reject_toobright = case_when(illumination > 50 & distance < 90 ~ TRUE, T ~ FALSE)) %>%
# REJECT for any reason
mutate(reject = reject_redfont | reject_baddate | reject_toolong | reject_toobright) %>%
# note says this is optimal
mutate(optimal = str_detect(note, 'OPTIMAL')) %>%
# recent observations
mutate(recent_observations = gsub("\\)", "", recent_observations)) %>%
mutate(recent_observations = gsub("\\(", "", recent_observations)) %>%
mutate(total_obs = as.integer(word(recent_observations, 4, sep = ' '))) %>%
mutate(recent_obs = as.integer(word(recent_observations, 5, sep = ' '))) %>%
identity()
df_planets_potential <- df_planets %>%
filter(reject == FALSE) %>%
# useful data for choosing
select(original_lineno, reject, observatory, note, planet, status, optimal, oc,
total_obs, recent_obs,
t_before_date, t_before_time, t_after_time, time_span,
illumination, distance) %>%
identity()
df_planets %>%
count(reject_baddate)
df_planets %>%
filter(reject_baddate == FALSE) %>%
tally()
df_planets %>%
filter(reject_baddate == FALSE) %>%
count(reject_redfont) %>%
tally()
df_planets %>%
#filter(reject_baddate == FALSE) %>%
count(reject_redfont) %>%
tally()
df_planets %>%
#filter(reject_baddate == FALSE) %>%
count(reject_redfont) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
count(reject_redfont) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
count(reject_redfont == FALSE) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
filter(reject_redfont == FALSE) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
filter(reject_redfont == FALSE) %>%
count(reject_toolong) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
filter(reject_redfont == FALSE) %>%
filter(reject_toolong == FALSE) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
filter(reject_redfont == FALSE) %>%
filter(reject_toolong == FALSE) %>%
count(reject_toolong) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
filter(reject_redfont == FALSE) %>%
filter(reject_toolong == FALSE) %>%
count(reject_toobright) %>%
# tally() %>%
identity()
df_planets %>%
filter(reject_baddate == FALSE) %>%
filter(reject_redfont == FALSE) %>%
filter(reject_toolong == FALSE) %>%
filter(reject_toobright == FALSE) %>%
# tally() %>%
identity()
df_planets_potential %>%
count(optimal)
df_planets_potential %>%
filter(optimal) %>%
select(note)
df_planets_potential %>%
filter(optimal) %>%
select(observatory, planet, status, oc, total_obs, recent_obs)
df_planets_potential %>%
filter(optimal) %>%
select(observatory, planet, status, oc, total_obs, recent_obs) %>%
arrange(total_obs)
df_planets_potential %>%
filter(optimal) %>%
select(observatory, planet, status, oc, total_obs, recent_obs, illumination, distance) %>%
arrange(total_obs)
df_planets_potential %>%
filter(optimal) %>%
select(optimal, observatory, planet, status, oc, total_obs, recent_obs, illumination, distance) %>%
arrange(total_obs)
df_planets_potential %>%
filter(optimal) %>%
select(optimal, original_lineno, observatory, planet, status, oc, total_obs, recent_obs, illumination, distance) %>%
arrange(total_obs)
df_planets_potential %>%
filter(optimal) %>%
select(optimal, original_lineno, observatory, planet, status, oc, total_obs, recent_obs,
time_span, t_before_date,
illumination, distance) %>%
arrange(total_obs)
df_planets_potential %>%
filter(optimal) %>%
select(optimal, original_lineno, observatory, planet, status, oc, total_obs, recent_obs,
time_span, t_before_date,
illumination, distance) %>%
arrange(total_obs) %>%
View()
